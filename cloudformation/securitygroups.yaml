AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Subnets:
    Type: "List<AWS::EC2::Subnet::Id>"

  VPC:
    Type: "AWS::EC2::VPC::Id"

Resources:
  ApplicationSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP 8080
      SecurityGroupIngress:
        - FromPort: 8080
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
          ToPort: 8080
      VpcId: !Ref VPC

  DatabaseSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: MySQL
      SecurityGroupIngress:
        - FromPort: 3306
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt ApplicationSG.GroupId
          ToPort: 3306
      VpcId: !Ref VPC

  LoadBalancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP and HTTPS
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref VPC

  #FIXME apply principle of least privilege & move to sep. CF stack
  CloudFormationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "*"
            Resource: "*"

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref CloudFormationPolicy
      MaxSessionDuration: 3600
      Path: /service-role/

Outputs:
  ApplicationSG:
    Value: !Ref ApplicationSG
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationSG"

  DatabaseSG:
    Value: !Ref DatabaseSG
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseSG"

  LoadBalancerSG:
    Value: !Ref LoadBalancerSG
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerSG"

  Subnets:
    Value: !Join
      - ","
      - Ref: Subnets
    Export:
      Name: !Sub "${AWS::StackName}-Subnets"

  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"

  CloudFormationRole:
    Value: !GetAtt [CloudFormationRole, Arn]
